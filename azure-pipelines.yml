trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'library-management-system'
  imageTag: '$(Build.BuildId)'
  outputFolder: 'docker_output'
  outputFile: 'lms-$(Build.BuildId).tar'
  remotePath: '/home/ec2-user/docker_images'
  containerName: 'lms-container'
  awsEc2SshConnection: 'aws-vm-ssh'
  ec2User: 'ec2-user'

steps:
- checkout: self
  fetchDepth: 2
  displayName: 'Checkout repository'

- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    command: 'build'
    Dockerfile: 'Dockerfile'
    repository: '$(imageName)'
    tags: '$(imageTag)'
    arguments: '--no-cache'

- script: |
    mkdir -p $(outputFolder)
    docker save -o $(outputFolder)/$(outputFile) $(imageName):$(imageTag)
  displayName: 'Save Docker Image to Tar File'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Docker Image Artifact'
  inputs:
    pathToPublish: '$(outputFolder)'
    artifactName: 'docker-image'
    publishLocation: 'Container'

- task: CopyFilesOverSSH@0
  displayName: 'Copy Docker Image to AWS EC2'
  inputs:
    sshEndpoint: '$(awsEc2SshConnection)'
    sourceFolder: '$(outputFolder)'
    contents: '$(outputFile)'
    targetFolder: '$(remotePath)'
    cleanTargetFolder: false
    overWrite: true

- task: SSH@0
  displayName: 'Deploy Docker Container with GUI on AWS EC2'
  inputs:
    sshEndpoint: '$(awsEc2SshConnection)'
    runOptions: 'inline'
    inline: |
      LOGFILE=/home/ec2-user/docker_deploy.log
      exec > $LOGFILE 2>&1

      echo "Ensuring remote directory exists..."
      sudo mkdir -p $(remotePath)
      sudo chown ec2-user:ec2-user $(remotePath)

      echo "Checking and installing Xvfb..."
      if ! command -v Xvfb > /dev/null; then
        sudo dnf install -y xorg-x11-server-Xvfb || { echo "Error: Failed to install Xvfb."; exit 1; }
      fi

      echo "Cleaning up existing Xvfb..."
      sudo pkill -f Xvfb || true
      sudo rm -f /tmp/.X99-lock /tmp/.X11-unix/X99 || true

      echo "Starting Xvfb on :99..."
      sudo Xvfb :99 -screen 0 1024x768x16 &
      sleep 3
      export DISPLAY=:99
      echo "DISPLAY=$DISPLAY"

      echo "Stopping existing Docker container if exists..."
      if sudo docker ps -a -q -f name=$(containerName); then
        sudo docker stop $(containerName) || true
        sudo docker rm $(containerName) || true
      fi

      echo "Removing existing Docker image if exists..."
      if sudo docker image inspect $(imageName):$(imageTag) > /dev/null 2>&1; then
        sudo docker rmi $(imageName):$(imageTag) || true
      fi

      echo "Loading Docker image from tar..."
      for attempt in {1..3}; do
        if sudo docker load -i $(remotePath)/$(outputFile); then
          echo "Docker image loaded successfully."
          break
        else
          echo "Attempt $attempt: Failed to load image. Retrying..."
          sleep 2
        fi
        if [ $attempt -eq 3 ]; then
          echo "Error: Failed to load Docker image after 3 attempts."
          exit 1
        fi
      done

      echo "Running Docker container with GUI (Tkinter) support..."
      sudo docker run -d --name $(containerName) \
        -e DISPLAY=$DISPLAY \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        --network host \
        $(imageName):$(imageTag)

      echo "Deployment complete. Container is running with DISPLAY=$DISPLAY"
    readyTimeout: '60000'
