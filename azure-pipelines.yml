trigger:
  - main

pool:
  vmImage: 'ubuntu-latest' # Build agent is Ubuntu-based

variables:
  imageName: 'library-management-system' # Name of the Docker image
  imageTag: '$(Build.BuildId)' # Use build ID for versioning
  outputFolder: 'docker_output' # Folder for .tar file
  outputFile: 'lms-$(Build.BuildId).tar' # Name of .tar file
  remotePath: '/home/ubuntu/docker_images' # EC2 destination path for Ubuntu user
  containerName: 'lms-container' # Container name on EC2
  awsEc2SshConnection: 'aws-ubuntu-ssh' # Azure DevOps SSH service connection
  ec2User: 'ubuntu' # SSH user for Ubuntu EC2

steps:
  - checkout: self
    fetchDepth: 1
    displayName: 'Checkout repository'

  - task: Docker@2
    displayName: 'Build Docker Image'
    inputs:
      command: 'build'
      Dockerfile: 'Dockerfile' # Dockerfile in root, copies ./src/*
      repository: '$(imageName)'
      tags: '$(imageTag)'
      arguments: '--no-cache' # Ensure fresh build

  - script: |
      mkdir -p $(outputFolder)
      docker save -o $(outputFolder)/$(outputFile) $(imageName):$(imageTag)
    displayName: 'Save Docker Image as Tar File'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Docker Image Artifact'
    inputs:
      pathToPublish: '$(outputFolder)/$(outputFile)'
      artifactName: 'docker-image'
      publishLocation: 'Container'

  - task: CopyFilesOverSSH@0
    displayName: 'Copy Docker Image .tar to AWS EC2'
    inputs:
      sshEndpoint: '$(awsEc2SshConnection)'
      sourceFolder: '$(outputFolder)'
      contents: '$(outputFile)'
      targetFolder: '$(remotePath)'
      cleanTargetFolder: false
      overWrite: true

  - task: SSH@0
    displayName: 'Setup X11 and Run Docker Image on AWS EC2'
    inputs:
      sshEndpoint: '$(awsEc2SshConnection)'
      runOptions: 'inline'
      inline: |
        # Redirect output to a log file for debugging
        exec > /home/ubuntu/docker_deploy.log 2>&1
        
        # Ensure remote directory exists
        sudo mkdir -p $(remotePath)
        echo "Directory $(remotePath) ensured."
        
        # Verify X11 environment
        echo "Checking X11 environment..."
        if ! command -v Xvfb > /dev/null; then
          echo "Error: Xvfb not installed. Please install xvfb."
          exit 1
        fi
        if ! pgrep Xvfb > /dev/null; then
          echo "Starting Xvfb on display :99..."
          sudo Xvfb :99 -screen 0 1024x768x16 &
          sleep 3
          if ! pgrep Xvfb > /dev/null; then
            echo "Error: Failed to start Xvfb."
            exit 1
          fi
          echo "Xvfb started successfully."
        else
          echo "Xvfb already running."
        fi
        export DISPLAY=:99
        echo "DISPLAY set to $DISPLAY"
        
        # Install and start x11vnc
        echo "Checking x11vnc installation..."
        if ! command -v x11vnc > /dev/null; then
          echo "Installing x11vnc..."
          sudo apt update
          sudo apt install x11vnc -y
        fi
        echo "Starting x11vnc on display :99..."
        sudo pkill x11vnc || true  # Stop any existing x11vnc
        sudo x11vnc -display :99 -forever -nopw &
        sleep 2
        if ! pgrep x11vnc > /dev/null; then
          echo "Error: Failed to start x11vnc."
          exit 1
        fi
        echo "x11vnc started successfully."
        
        # Stop and remove existing container
        echo "Checking for existing container..."
        if sudo docker ps -a -q -f name=$(containerName); then
          echo "Stopping and removing container $(containerName)..."
          sudo docker stop $(containerName) || { echo "Error stopping container"; exit 1; }
          sudo docker rm $(containerName) || { echo "Error removing container"; exit 1; }
        else
          echo "No existing container found."
        fi
        
        # Remove existing image to avoid conflicts
        echo "Checking for existing image..."
        if sudo docker image inspect $(imageName):$(imageTag) > /dev/null 2>&1; then
          echo "Removing image $(imageName):$(imageTag)..."
          sudo docker rmi $(imageName):$(imageTag) || { echo "Error removing image"; exit 1; }
        else
          echo "No existing image found."
        fi
        
        # Load the new Docker image with retry
        echo "Loading image from $(remotePath)/$(outputFile)..."
        for attempt in {1..3}; do
          if sudo docker load -i $(remotePath)/$(outputFile); then
            echo "Image loaded successfully."
            break
          else
            echo "Attempt $attempt: Failed to load image."
            if [ $attempt -eq 3 ]; then
              echo "Error: Failed to load image after 3 attempts."
              exit 1
            fi
            sleep 2
          fi
        done
        
        # Run the container with X11 support for Tkinter
        echo "Starting container $(containerName)..."
        sudo docker run -d --name $(containerName) \
          -e DISPLAY=$DISPLAY \
          --network host \
          $(imageName):$(imageTag) || { echo "Error starting container"; exit 1; }
        
        echo "Container started successfully."
      readyTimeout: '60000' # Increased timeout for SSH reliability